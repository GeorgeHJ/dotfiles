#! /bin/env zsh
# vim: foldmethod=marker

# {{{ P10k Instant Prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
	source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
# }}}

#{{{ History File
HISTFILE=~/.cache/zsh/history
HISTSIZE=10000
SAVEHIST=10000
if [[ ! -f "$HISTFILE" ]];then
	mkdir "$HOME/.cache/zsh" && touch "$HISTFILE"
fi
#}}}

#{{{ Fallback PS1
autoload -U colors && colors
PS1="%B[%{$fg[green]%}%n%{$fg[green]%}%{$reset_color%}%B@%{$fg[green]%}%M %{$reset_color%}%B%~]%{$reset_color%}%#%(?..%{$fg[red]%} %?)%b "
#}}}

#{{{ compinstall and compinit options
zstyle :compinstall filename '/home/george/.config/zsh/zshrc'
zstyle ':completion:*' rehash true
zstyle ':completion::complete:*' use-cache on
zstyle ':completion:*:descriptions' format $'%B%{\e[10;39m%}[%d]%b%{\e[0m%}'
zstyle ':completion:*:messages' format '%U%d%u'
zstyle ':completion:*:warnings' format "%B%{$fg[red]%}No match for:%b%{$reset_color%} %d"
zstyle ':completion:*' group-name ''

# Execute code in the background to not affect the current session
{
	# Compile zcompdump, if modified, to increase startup speed.
	zcompdump="${ZDOTDIR:-$HOME}/.zcompdump"
	if [[ -s "$zcompdump" && (! -s "${zcompdump}.zwc" || "$zcompdump" -nt "${zcompdump}.zwc") ]]; then
		zcompile "$zcompdump"
	fi
} &!

autoload -Uz compinit
compinit
#}}} End of lines added by compinstall

#{{{ Bash-style help
autoload run-help
unalias run-help
alias help=run-help
# }}}

#{{{ Named Directories
declare -A hash_dirs
hash_dirs[bin]="$HOME/.local/bin"
hash_dirs[go]="$GOPATH"
hash_dirs[zsh]="$XDG_CONFIG_HOME/zsh"
hash_dirs[vim]="$XDG_CONFIG_HOME/vim"

# Loop over the associative array to build the directory hashes
for key value in ${(kv)hash_dirs};
do
	if [[ -L "$value" ]];then
		hash -d "$key"="$(readlink "$value")"
	elif [[ -d "$value" ]]; then
		hash -d "$key"="$value"
	fi
done
unset hash_dirs

# The standard _tilde completion function with users removed named directories only
_tilde_no_users () {
	[[ -n "$compstate[quote]" ]] && return 1
	local expl suf ret=1
	if [[ "$SUFFIX" = */* ]]; then
		ISUFFIX="/${SUFFIX#*/}$ISUFFIX"
		SUFFIX="${SUFFIX%%/*}"
		suf=(-S '')
	else
		suf=(-qS/)
	fi
	_tags named-directories directory-stack
	while _tags; do
		_requested named-directories expl 'named directory' compadd "$suf[@]" "$@" -k nameddirs && ret=0
		_requested directory-stack && _directory_stack "$suf[@]" && ret=0
		(( ret )) || return 0
	done
	return ret
}
compdef _tilde_no_users -tilde-

#}}}

# Shell options{{{
unsetopt nomatch

# Initialise arrays for hook functions
typeset -a precmd_functions preexec_functions
#}}}

# {{{ Completion Options
# Include hidden files in autocomplete:
_comp_options+=(globdots)
# Add personal completions and functions directories to fpath
fpath=($ZDOTDIR/completions $ZDOTDIR/functions $fpath )
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:commands' list-colors '=*=32'
zstyle ':completion:*:builtins' list-colors '=*=32'
zstyle ':completion:*:aliases' list-colors '=*=32'
zstyle ':completion:*:options' list-colors '=*=39'
zstyle ':completion:*:*:man:*' list-colors '=*=39'
zmodload zsh/complist
# }}}

#{{{ Vi Keybindings
bindkey -v # Use Vi Keys
# Backspace fix
bindkey '^?' backward-delete-char
bindkey -a "^[[3~" vi-delete-char
bindkey -a "^[3;5~" vi-delete-char
bindkey "^[[3~" delete-char
bindkey "^[3;5~" delete-char
export KEYTIMEOUT=1 # Suggested for Vi mode
# Insert Mode bindings
bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^L' clear-screen
bindkey '^K' kill-line
# use the vi navigation keys in menu completion
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
# Edit line in $EDITOR with ctrl-v:
autoload edit-command-line; zle -N edit-command-line
bindkey -a '^v' edit-command-line
#}}}

#{{{ Vim text objects
# ci", ci', ci`, di", etc
autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
	for c in {a,i}{\',\",\`}; do
		bindkey -M $m $c select-quoted
	done
done

# ci{, ci(, ci<, di{, etc
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
	for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
		bindkey -M $m $c select-bracketed
	done
done
#}}}

#{{{ Widgets and bindings
vicd_wrapper(){BUFFER="vicd $PWD"; zle accept-line; }
zle -N vicd_wrapper
bindkey -a '^o' vicd_wrapper
# Fzf Manpages
zle -N fman
bindkey -a 'm' fman
#}}}

# {{{ Luke Smith â€” cursor settings
# https://github.com/LukeSmithxyz/voidrice/blob/master/.config/zsh/.zshrc
# Now autoloaded from my fpath
autoload zle-line-init; zle -N zle-line-init
autoload zle-line-blockcursor; zle -N zle-line-blockcursor

# Add it to the array of preexec functions
preexec_functions+=(zle-line-blockcursor)

autoload zle-keymap-select; zle -N zle-keymap-select
# }}}

#{{{ Source extra files

#Global alias file
[ -f "$HOME/.config/shells/alias" ] && source "$HOME/.config/shells/alias"
[ -f "$HOME/.config/shells/functions" ]&& source "$HOME/.config/shells/functions"
# Pacman command not found hook
if
	[[ -a '/usr/share/doc/pkgfile/command-not-found.zsh' ]]
then
	source /usr/share/doc/pkgfile/command-not-found.zsh
fi

if
	[[ "command -v broot" ]]
then
	autoload br
fi
#}}}

#{{{ Dircolors
# Use dircolors to set LS_COLOR
[ -f "$HOME/.dircolors" ] &&
	eval "$(dircolors "$HOME/.dir_colors")" ||
	[ -f "$HOME/.config/dir_colors/dir_colors" ] &&
	eval "$(dircolors "$HOME/.config/dir_colors/dir_colors")"
#}}}

# {{{ FZF Options
# Use fzf
if uname -a | grep -q Android;then
	[ -f "$PREFIX/share/fzf/completion.zsh" ] && source "$PREFIX/share/fzf/completion.zsh"
	[ -f "$PREFIX/share/fzf/key-bindings.zsh" ] && source "$PREFIX/share/fzf/key-bindings.zsh"
else
	[ -f "/usr/share/fzf/completion.zsh" ] && source /usr/share/fzf/completion.zsh
	[ -f "/usr/share/fzf/key-bindings.zsh" ] && source /usr/share/fzf/key-bindings.zsh
fi
# Preview alt-c directories with tree
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -100'"
# }}}

#{{{ Terminals: tmux/xterm, title options and little fixes

autoload tmux_title_restore tmux_title_set xterm_window_title

case $TERM in
	screen*|tmux*)
		precmd_functions+=(tmux_title_restore)
		preexec_functions+=(tmux_title_set)
		;;
	xterm*)
		precmd_functions+=(xterm_window_title)
		;;
esac
#}}}

#{{{ Autosuggestions Settings
# Settings for Autosuggestions
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
ZSH_AUTOSUGGEST_USE_ASYNC=1
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#586e75,bold,underline"
bindkey '^ ' autosuggest-accept
bindkey 'M-w' forward-word
#}}}

# {{{ Plugins
if [[ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]];then
	source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [[ -f "$HOME/.local/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]];then
	source "$HOME/.local/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
fi
if [[ -f /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh ]]; then
	source /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
elif [[ -f "$HOME/.local/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh" ]];then
	source "$HOME/.local/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"
fi
if [[ $(tput colors) == "256" ]];then
	autoload powerlevel9k; powerlevel9k
	if [[ -f /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme ]];then
		source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
	elif [[ -f "$HOME/.local/share/zsh/themes/powerlevel10k/powerlevel10k.zsh-theme" ]];then
		source "$HOME/.local/share/zsh/themes/powerlevel10k/powerlevel10k.zsh-theme"
	fi
fi
# }}}
